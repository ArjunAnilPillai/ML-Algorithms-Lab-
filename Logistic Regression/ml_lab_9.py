# -*- coding: utf-8 -*-
"""ML Lab 9

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mwYxrMaSh79F-_-qWt6lN0ysPnJvCUEt

#Name - Arjun A.
#Roll number - 181CO109
#Date of submission - 19-3-2021
This notebook was written in google colab. <br>Link to view notebook<br>
https://colab.research.google.com/drive/1mwYxrMaSh79F-_-qWt6lN0ysPnJvCUEt?usp=sharing

#ML Lab 9 - Logistic Regression
This notebook is used to implement Logistic Regression to do classification.

##Importing necessary packages
"""

from sklearn.datasets import load_iris
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""##Importing data from the iris dataset
Using the load_iris function from sklearn, importing the iris dataset

https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_iris.html#sklearn.datasets.load_iris
"""

# Function to import data
def importdata(): 

  irisData = load_iris()
  X = irisData.data
  Y = irisData.target
  names = irisData.target_names
  featureName = irisData.feature_names
  print(type(X))
  print(type(Y))
  print(names)
  
  return X, Y, names, featureName

X, Y, irisClassNames, irisFeatureNames = importdata()

"""##Splitting the data into train and test sets
 Splitting the data in the ratio of 7:3. (70% training and 30% testing)
"""

def splitdataset(X, Y): 

  X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state = 100) #Specifying random_state to get the same dataset split everytime 
	
  return X, Y, X_train, X_test, y_train, y_test

X, Y, X_train, X_test, y_train, y_test = splitdataset(X, Y)

#Use to print the entire dataset
#print(X, Y, X_train, X_test, y_train, y_test, sep = '\n\n')

#Printing size of the split
print('Test dataset size\nX_test -', len(X_test), '\ny_test -', len(y_test), '\n')
print('Train dataset size\nX_train -', len(X_train), '\ny_train -', len(y_train))

"""## Defining model"""

logRegression = LogisticRegression(max_iter= 1000)

"""##Training model on train dataset"""

logRegression.fit(X_train,y_train)

"""##Calculating accuracy on the model using the test set"""

y_pred = logRegression.predict(X_test)
print('Accuracy =',logRegression.score(X_test,y_test), '\n')
print('Confusion Matrix\n')
print(confusion_matrix(y_test, y_pred))
print('\nClassification report\n')
print(classification_report(y_test, y_pred))